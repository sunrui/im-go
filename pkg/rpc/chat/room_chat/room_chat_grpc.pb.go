//
// Copyright © 2024 honeysense.com All rights reserved.
// Author: sunrui
// Date: 2024-03-26 14:03:40

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: pkg/rpc/chat/room_chat/room_chat.proto

package room_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoomChat_Subscribe_FullMethodName = "/pkg.rpc.chat.room_chat.RoomChat/Subscribe"
)

// RoomChatClient is the client API for RoomChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomChatClient interface {
	// 订阅
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RoomChat_SubscribeClient, error)
}

type roomChatClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomChatClient(cc grpc.ClientConnInterface) RoomChatClient {
	return &roomChatClient{cc}
}

func (c *roomChatClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RoomChat_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomChat_ServiceDesc.Streams[0], RoomChat_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roomChatSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomChat_SubscribeClient interface {
	Recv() (*SubscribeReply, error)
	grpc.ClientStream
}

type roomChatSubscribeClient struct {
	grpc.ClientStream
}

func (x *roomChatSubscribeClient) Recv() (*SubscribeReply, error) {
	m := new(SubscribeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomChatServer is the server API for RoomChat service.
// All implementations must embed UnimplementedRoomChatServer
// for forward compatibility
type RoomChatServer interface {
	// 订阅
	Subscribe(*SubscribeRequest, RoomChat_SubscribeServer) error
	mustEmbedUnimplementedRoomChatServer()
}

// UnimplementedRoomChatServer must be embedded to have forward compatible implementations.
type UnimplementedRoomChatServer struct {
}

func (UnimplementedRoomChatServer) Subscribe(*SubscribeRequest, RoomChat_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRoomChatServer) mustEmbedUnimplementedRoomChatServer() {}

// UnsafeRoomChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomChatServer will
// result in compilation errors.
type UnsafeRoomChatServer interface {
	mustEmbedUnimplementedRoomChatServer()
}

func RegisterRoomChatServer(s grpc.ServiceRegistrar, srv RoomChatServer) {
	s.RegisterService(&RoomChat_ServiceDesc, srv)
}

func _RoomChat_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomChatServer).Subscribe(m, &roomChatSubscribeServer{stream})
}

type RoomChat_SubscribeServer interface {
	Send(*SubscribeReply) error
	grpc.ServerStream
}

type roomChatSubscribeServer struct {
	grpc.ServerStream
}

func (x *roomChatSubscribeServer) Send(m *SubscribeReply) error {
	return x.ServerStream.SendMsg(m)
}

// RoomChat_ServiceDesc is the grpc.ServiceDesc for RoomChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.rpc.chat.room_chat.RoomChat",
	HandlerType: (*RoomChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RoomChat_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/rpc/chat/room_chat/room_chat.proto",
}
