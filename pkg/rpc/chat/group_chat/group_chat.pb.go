//
// Copyright © 2024 honeysense.com All rights reserved.
// Author: sunrui
// Date: 2024-03-26 13:47:26

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: pkg/rpc/chat/group_chat/group_chat.proto

package group_chat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 订阅请求
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescGZIP(), []int{0}
}

// 订阅回复
type SubscribeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用户 id
	// Types that are assignable to Type:
	//
	//	*SubscribeReply_Online
	//	*SubscribeReply_Offline
	//	*SubscribeReply_Join
	//	*SubscribeReply_Leave
	//	*SubscribeReply_Mute
	//	*SubscribeReply_Unmute
	Type isSubscribeReply_Type `protobuf_oneof:"Type"`
}

func (x *SubscribeReply) Reset() {
	*x = SubscribeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeReply) ProtoMessage() {}

func (x *SubscribeReply) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeReply.ProtoReflect.Descriptor instead.
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeReply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (m *SubscribeReply) GetType() isSubscribeReply_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SubscribeReply) GetOnline() *Online {
	if x, ok := x.GetType().(*SubscribeReply_Online); ok {
		return x.Online
	}
	return nil
}

func (x *SubscribeReply) GetOffline() *Offline {
	if x, ok := x.GetType().(*SubscribeReply_Offline); ok {
		return x.Offline
	}
	return nil
}

func (x *SubscribeReply) GetJoin() *Join {
	if x, ok := x.GetType().(*SubscribeReply_Join); ok {
		return x.Join
	}
	return nil
}

func (x *SubscribeReply) GetLeave() *Leave {
	if x, ok := x.GetType().(*SubscribeReply_Leave); ok {
		return x.Leave
	}
	return nil
}

func (x *SubscribeReply) GetMute() *Mute {
	if x, ok := x.GetType().(*SubscribeReply_Mute); ok {
		return x.Mute
	}
	return nil
}

func (x *SubscribeReply) GetUnmute() *Unmute {
	if x, ok := x.GetType().(*SubscribeReply_Unmute); ok {
		return x.Unmute
	}
	return nil
}

type isSubscribeReply_Type interface {
	isSubscribeReply_Type()
}

type SubscribeReply_Online struct {
	Online *Online `protobuf:"bytes,6,opt,name=online,proto3,oneof"` // 上线
}

type SubscribeReply_Offline struct {
	Offline *Offline `protobuf:"bytes,7,opt,name=offline,proto3,oneof"` // 下线
}

type SubscribeReply_Join struct {
	Join *Join `protobuf:"bytes,2,opt,name=join,proto3,oneof"` // 加入
}

type SubscribeReply_Leave struct {
	Leave *Leave `protobuf:"bytes,3,opt,name=leave,proto3,oneof"` // 离开
}

type SubscribeReply_Mute struct {
	Mute *Mute `protobuf:"bytes,4,opt,name=mute,proto3,oneof"` // 禁言
}

type SubscribeReply_Unmute struct {
	Unmute *Unmute `protobuf:"bytes,5,opt,name=unmute,proto3,oneof"` // 解除禁言
}

func (*SubscribeReply_Online) isSubscribeReply_Type() {}

func (*SubscribeReply_Offline) isSubscribeReply_Type() {}

func (*SubscribeReply_Join) isSubscribeReply_Type() {}

func (*SubscribeReply_Leave) isSubscribeReply_Type() {}

func (*SubscribeReply_Mute) isSubscribeReply_Type() {}

func (*SubscribeReply_Unmute) isSubscribeReply_Type() {}

var File_pkg_rpc_chat_group_chat_group_chat_proto protoreflect.FileDescriptor

var file_pkg_rpc_chat_group_chat_group_chat_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x6b, 0x67, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x1a, 0x24, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x70, 0x6b, 0x67, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6a, 0x6f, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x6b, 0x67, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x6d, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70,
	0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x86, 0x03, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x69, 0x6e,
	0x12, 0x36, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x6e, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x12, 0x61, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x6b, 0x67,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x30, 0x01,
	0x42, 0x19, 0x5a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescOnce sync.Once
	file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescData = file_pkg_rpc_chat_group_chat_group_chat_proto_rawDesc
)

func file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescGZIP() []byte {
	file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescData)
	})
	return file_pkg_rpc_chat_group_chat_group_chat_proto_rawDescData
}

var file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_rpc_chat_group_chat_group_chat_proto_goTypes = []interface{}{
	(*SubscribeRequest)(nil), // 0: pkg.rpc.chat.group_chat.SubscribeRequest
	(*SubscribeReply)(nil),   // 1: pkg.rpc.chat.group_chat.SubscribeReply
	(*Online)(nil),           // 2: pkg.rpc.chat.group_chat.Online
	(*Offline)(nil),          // 3: pkg.rpc.chat.group_chat.Offline
	(*Join)(nil),             // 4: pkg.rpc.chat.group_chat.Join
	(*Leave)(nil),            // 5: pkg.rpc.chat.group_chat.Leave
	(*Mute)(nil),             // 6: pkg.rpc.chat.group_chat.Mute
	(*Unmute)(nil),           // 7: pkg.rpc.chat.group_chat.Unmute
}
var file_pkg_rpc_chat_group_chat_group_chat_proto_depIdxs = []int32{
	2, // 0: pkg.rpc.chat.group_chat.SubscribeReply.online:type_name -> pkg.rpc.chat.group_chat.Online
	3, // 1: pkg.rpc.chat.group_chat.SubscribeReply.offline:type_name -> pkg.rpc.chat.group_chat.Offline
	4, // 2: pkg.rpc.chat.group_chat.SubscribeReply.join:type_name -> pkg.rpc.chat.group_chat.Join
	5, // 3: pkg.rpc.chat.group_chat.SubscribeReply.leave:type_name -> pkg.rpc.chat.group_chat.Leave
	6, // 4: pkg.rpc.chat.group_chat.SubscribeReply.mute:type_name -> pkg.rpc.chat.group_chat.Mute
	7, // 5: pkg.rpc.chat.group_chat.SubscribeReply.unmute:type_name -> pkg.rpc.chat.group_chat.Unmute
	0, // 6: pkg.rpc.chat.group_chat.GroupChat.Subscribe:input_type -> pkg.rpc.chat.group_chat.SubscribeRequest
	1, // 7: pkg.rpc.chat.group_chat.GroupChat.Subscribe:output_type -> pkg.rpc.chat.group_chat.SubscribeReply
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_pkg_rpc_chat_group_chat_group_chat_proto_init() }
func file_pkg_rpc_chat_group_chat_group_chat_proto_init() {
	if File_pkg_rpc_chat_group_chat_group_chat_proto != nil {
		return
	}
	file_pkg_rpc_chat_group_chat_online_proto_init()
	file_pkg_rpc_chat_group_chat_offline_proto_init()
	file_pkg_rpc_chat_group_chat_join_proto_init()
	file_pkg_rpc_chat_group_chat_leave_proto_init()
	file_pkg_rpc_chat_group_chat_mute_proto_init()
	file_pkg_rpc_chat_group_chat_unmute_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscribeReply_Online)(nil),
		(*SubscribeReply_Offline)(nil),
		(*SubscribeReply_Join)(nil),
		(*SubscribeReply_Leave)(nil),
		(*SubscribeReply_Mute)(nil),
		(*SubscribeReply_Unmute)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rpc_chat_group_chat_group_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_chat_group_chat_group_chat_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_chat_group_chat_group_chat_proto_depIdxs,
		MessageInfos:      file_pkg_rpc_chat_group_chat_group_chat_proto_msgTypes,
	}.Build()
	File_pkg_rpc_chat_group_chat_group_chat_proto = out.File
	file_pkg_rpc_chat_group_chat_group_chat_proto_rawDesc = nil
	file_pkg_rpc_chat_group_chat_group_chat_proto_goTypes = nil
	file_pkg_rpc_chat_group_chat_group_chat_proto_depIdxs = nil
}
